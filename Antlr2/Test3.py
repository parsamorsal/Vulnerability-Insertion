from antlr4 import *
from CLexer import CLexer
from CParser import CParser
from CListener import CListener
# import re

# expression haye tu if,else va for ro joda benevisim!
# jayi ki mikham replace konam bayad () bezaram


def main():
    # file = FileStream("gzunBm.c")
    file = FileStream("FvAkgViQ.c")
    # file = FileStream("RXP.c")
    lexer = CLexer(file)
    stream = CommonTokenStream(lexer)
    parser = CParser(stream)
    tree = parser.compilationUnit()

    listener = myCListener()
    walker = ParseTreeWalker()
    walker.walk(listener, tree)

    listener.show()


class myCListener(CListener):

    def __init__(self):
        self.is_main = True
        self.variable = {}
        self.variable_if = {}
        self.variable_for = {}
        self.parameter = []
        self.function_name = ""
        self.in_if = False

    def enterFunctionDefinition(self, ctx: CParser.FunctionDefinitionContext):
        # function_name = ctx.children.get(1).getChild(0).getChild(0).getText()
        function_name = ctx.children[1].getChild(0).getChild(0).getText()
        if function_name == "main":
            self.is_main = False
            return
        self.function_name = function_name
        print("Function name: " + self.function_name)

    def enterParameterDeclaration(self, ctx: CParser.ParameterDeclarationContext):
        if self.is_main:
            self.parameter.append(ctx.declarator().getText())

    def enterInitDeclarator(self, ctx: CParser.InitDeclaratorContext):
        if self.is_main:
            variable_name = ctx.declarator().getText()
            variable_value = ctx.initializer().getText()
            self.variable[variable_name] = variable_value

    def enterExpressionStatement(self, ctx: CParser.ExpressionStatementContext):
        expr = ctx.getText()
        if self.is_main:
            if not self.in_if:
                self.resolve(expr)
        else:
            # expr = expr[17:]  OR:
            # expr = re.sub("^printf\(\"%d\"," + "KjZC\(", "", expr) OR:
            expr = expr[expr.index(self.function_name) + len(self.function_name) + 1: -3]
            expr = expr.split(",")
            for i in range(len(expr)):
                self.parameter[i] = {self.parameter[i]: expr[i]}

    # def enterExpression(self, ctx:CParser.ExpressionContext):
    #     if self.is_main:
    #         expr = ctx.getText()
    #         if expr.__contains__("="):
    #             expr = expr.split("=")
    #             for i, j in self.variable.items():
    #                 if i in expr[1]:
    #                     expr[1] = expr[1].replace(i, j)
    #             self.variable[expr[0]] = expr[1]
    #             print(expr[0] + " = " + expr[1])
    #         else:
    #             print(expr)

    # if:
    def enterSelectionStatement(self, ctx: CParser.SelectionStatementContext):
        self.in_if = True

        a = str(ctx.children[4].getText()[1:-2])
        a = a.split(";")

        for k in a:
            self.resolve(k)

    def exitSelectionStatement(self, ctx: CParser.SelectionStatementContext):
        self.in_if = False

    # for:
    def enterIterationStatement(self, ctx: CParser.IterationStatementContext):
        for_condition = ctx.children[2].getText().split(";")
        # print("for condition: " + str(for_condition))
        print("IterationStatement: " + ctx.children[4].getText())
        a = str(ctx.children[4].getText())[1:-2]
        a = a.split(";")
        for k in a:
            self.resolve(k)

    def resolve(self, expr):
        expr = expr.replace(";", "")
        expr = expr.split("=")
        for i, j in self.variable.items():
            if i in expr[1]:
                expr[1] = expr[1].replace(i, j)
        self.variable[expr[0]] = expr[1]

    def show(self):
        print("\nVariable:")
        for i,j in self.variable.items():
            print(i + ": " + j)
        # print("\nParameter:")
        # for i in self.parameter:
        #     print(i)
        # for i in self.expression_in_if:
        #     print(i)


if __name__ == '__main__':
    main()
