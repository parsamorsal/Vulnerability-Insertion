from antlr4 import *
from CLexer import CLexer
from CParser import CParser
from CVisitor import CVisitor


def main():
    file = FileStream("gzunBm.c")
    # file = FileStream("RXP.c")
    lexer = CLexer(file)
    stream = CommonTokenStream(lexer)
    parser = CParser(stream)
    tree = parser.compilationUnit()

    visitor = my_visitor()
    visitor.visit(tree)
    visitor.show()


class my_visitor(CVisitor):

    def __init__(self):
        self.is_main = True
        self.variable = {}
        self.parameter = []
        self.function_name = ""

    def visitFunctionDefinition(self, ctx:CParser.FunctionDefinitionContext):
        function_name = ctx.children[1].getChild(0).getChild(0).getText()
        if function_name == "main":
            self.is_main = False
            return
        self.function_name = function_name
        print("Function name: " + self.function_name)
        return self.visitChildren(ctx)

    def visitParameterDeclaration(self, ctx:CParser.ParameterDeclarationContext):
        if self.is_main:
            self.parameter.append(ctx.declarator().getText())
        return self.visitChildren(ctx)

    def visitInitDeclarator(self, ctx:CParser.InitDeclaratorContext):
        if self.is_main:
            variable_name = ctx.declarator().getText()
            variable_value = ctx.initializer().getText()
            self.variable[variable_name] = variable_value
        return self.visitChildren(ctx)

    def visitExpressionStatement(self, ctx:CParser.ExpressionStatementContext):
        expr = ctx.getText()
        print(expr)
        if self.is_main:
            # expr = ctx.getText()
            expr = expr.replace(";", "")
            expr = expr.split("=")
            for i, j in self.variable.items():
                if i in expr[1]:
                    expr[1] = expr[1].replace(i, j)
            self.variable[expr[0]] = expr[1]
            # print(expr[0] + " = " + expr[1])
        else:
            # expr = expr[17:]  OR:
            # expr = re.sub("^printf\(\"%d\"," + "KjZC\(", "", expr) OR:
            expr = expr[expr.index(self.function_name) + len(self.function_name) + 1: -3]
            print("**************")
            expr = expr.split(",")
            for i in range(len(expr)):
                self.parameter[i] = {self.parameter[i]: expr[i]}
        return self.visitChildren(ctx)

    def visitSelectionStatement(self, ctx:CParser.SelectionStatementContext):
        # if ( condition ) statement else statement
        # condition:
        # print(ctx.children[2].getText())
        # statement:
        # print(ctx.children[4].getText())
        # else:
        # print(ctx.children[5].getText())
        # statement:
        # print(ctx.children[6].getText())
        return self.visitChildren(ctx)

    def visitIterationStatement(self, ctx:CParser.IterationStatementContext):
        # print(ctx.children[2].getText())
        for_condition = ctx.children[2].getText().split(";")
        # print("for condition: " + str(for_condition))
        # print("IterationStatement: " + ctx.children[4].getText())
        return self.visitChildren(ctx)

    def show(self):
        print("Variable:")
        for i,j in self.variable.items():
            print(i + ": " + j)
        print("\nParameter:")
        for i in self.parameter:
            print(i)


if __name__ == '__main__':
    main()
